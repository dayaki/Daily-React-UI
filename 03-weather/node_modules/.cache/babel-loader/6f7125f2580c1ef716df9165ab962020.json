{"ast":null,"code":"import _regeneratorRuntime from \"/Users/SpryPixels/Desktop/daily-react/day02/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/SpryPixels/Desktop/daily-react/day02/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/SpryPixels/Desktop/daily-react/day02/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/SpryPixels/Desktop/daily-react/day02/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/SpryPixels/Desktop/daily-react/day02/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/SpryPixels/Desktop/daily-react/day02/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/SpryPixels/Desktop/daily-react/day02/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/SpryPixels/Desktop/daily-react/day02/src/components/App.jsx\";\nimport React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.scss';\nimport '../assets/weather-icons/css/weather-icons.css';\nimport Background from './background/Background';\nimport Status from './status/Status';\nimport Date from './date/Date';\nimport Forecasts from './forecasts/Forecasts';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      weatherData: {},\n      locationData: {}\n    }; // this.getLocation();\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getLocation();\n    }\n  }, {\n    key: \"getLocation\",\n    value: function getLocation() {\n      var _this2 = this;\n\n      var geolocation = navigator.geolocation;\n      geolocation.getCurrentPosition(function (position) {\n        _this2.getWeatherInfo(position.coords.latitude, position.coords.longitude);\n      });\n    }\n  }, {\n    key: \"getCountry\",\n    value: function () {\n      var _getCountry = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(lat, lon) {\n        var data, location;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return fetch(\"http://www.mapquestapi.com/geocoding/v1/reverse?key=KEY&location=\".concat(lat, \",\").concat(lon)).then(function (res) {\n                  return res.json();\n                });\n\n              case 2:\n                data = _context.sent;\n                location = {\n                  city: data.adminArea5,\n                  country: data.adminArea1\n                };\n                this.setState({\n                  locationData: location\n                });\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function getCountry(_x, _x2) {\n        return _getCountry.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"getWeatherInfo\",\n    value: function () {\n      var _getWeatherInfo = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(lat, long) {\n        var oneData, res, weatherInfo;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return fetch(\"https://api.openweathermap.org/data/2.5/weather?lat=\".concat(lat, \"&lon=\").concat(long, \"&units=metric&appid=c5baa00af2bfbc51b5a8bff68a069bb0&cnt=7\")).then(function (res) {\n                  return res.json();\n                });\n\n              case 2:\n                oneData = _context2.sent;\n                _context2.next = 5;\n                return fetch(\"https://api.openweathermap.org/data/2.5/forecast/daily?lat=\".concat(lat, \"&lon=\").concat(long, \"&units=metric&appid=c5baa00af2bfbc51b5a8bff68a069bb0&cnt=7\")).then(function (res) {\n                  return res.json();\n                });\n\n              case 5:\n                res = _context2.sent;\n                // console.log(res)\n                weatherInfo = {\n                  temp: oneData.main.temp,\n                  desc: oneData.weather[0].description,\n                  icon: \"wi-owm-\".concat(oneData.weather[0].id)\n                }; // const forecastData = {\n                //   temp: res.list[0].main.temp,\n                //   desc: res.weather[0].description,\n                //   icon: `wi-owm-${res.weather[0].id}`\n                // };\n\n                this.setState({\n                  weatherData: weatherInfo,\n                  forecastData: res.list\n                }); // console.log(this.state.forecastData)\n\n              case 8:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function getWeatherInfo(_x3, _x4) {\n        return _getWeatherInfo.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, React.createElement(Background, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-8\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, React.createElement(Date, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"col-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, React.createElement(Status, {\n        weatherData: this.state.weatherData,\n        location: this.state.locationData,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      })))), React.createElement(\"div\", {\n        className: \"forecastsWrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, React.createElement(Forecasts, {\n        forecasts: this.state.forecastData,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/SpryPixels/Desktop/daily-react/day02/src/components/App.jsx"],"names":["React","Component","Background","Status","Date","Forecasts","App","props","state","weatherData","locationData","getLocation","geolocation","navigator","getCurrentPosition","position","getWeatherInfo","coords","latitude","longitude","lat","lon","fetch","then","res","json","data","location","city","adminArea5","country","adminArea1","setState","long","oneData","weatherInfo","temp","main","desc","weather","description","icon","id","forecastData","list"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,sCAAP;AACA,OAAO,YAAP;AACA,OAAO,+CAAP;AAEA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAOC,SAAP,MAAsB,uBAAtB;;IAEMC,G;;;;;AACJ,eAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,6EAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACXC,MAAAA,WAAW,EAAE,EADF;AAEXC,MAAAA,YAAY,EAAE;AAFH,KAAb,CAFiB,CAOjB;;AAPiB;AAQlB;;;;wCAEmB;AAClB,WAAKC,WAAL;AACD;;;kCAEc;AAAA;;AACb,UAAMC,WAAW,GAAGC,SAAS,CAACD,WAA9B;AACAA,MAAAA,WAAW,CAACE,kBAAZ,CAA+B,UAAAC,QAAQ,EAAI;AACzC,QAAA,MAAI,CAACC,cAAL,CAAoBD,QAAQ,CAACE,MAAT,CAAgBC,QAApC,EAA8CH,QAAQ,CAACE,MAAT,CAAgBE,SAA9D;AACD,OAFD;AAGD;;;;;;gDAEgBC,G,EAAKC,G;;;;;;;uBACDC,KAAK,4EAAqEF,GAArE,cAA4EC,GAA5E,EAAL,CAAwFE,IAAxF,CAA6F,UAAAC,GAAG;AAAA,yBAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,iBAAhG,C;;;AAAbC,gBAAAA,I;AAEAC,gBAAAA,Q,GAAW;AACfC,kBAAAA,IAAI,EAAEF,IAAI,CAACG,UADI;AAEfC,kBAAAA,OAAO,EAAEJ,IAAI,CAACK;AAFC,iB;AAKjB,qBAAKC,QAAL,CAAc;AACZtB,kBAAAA,YAAY,EAAEiB;AADF,iBAAd;;;;;;;;;;;;;;;;;;;iDAKmBP,G,EAAKa,I;;;;;;;uBACFX,KAAK,+DAAwDF,GAAxD,kBAAmEa,IAAnE,gEAAL,CAA0IV,IAA1I,CAA+I,UAAAC,GAAG;AAAA,yBAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,iBAAlJ,C;;;AAAhBS,gBAAAA,O;;uBAEYZ,KAAK,sEAA+DF,GAA/D,kBAA0Ea,IAA1E,gEAAL,CAAiJV,IAAjJ,CAAsJ,UAAAC,GAAG;AAAA,yBAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,iBAAzJ,C;;;AAAZD,gBAAAA,G;AAEN;AAEMW,gBAAAA,W,GAAc;AAClBC,kBAAAA,IAAI,EAAEF,OAAO,CAACG,IAAR,CAAaD,IADD;AAElBE,kBAAAA,IAAI,EAAEJ,OAAO,CAACK,OAAR,CAAgB,CAAhB,EAAmBC,WAFP;AAGlBC,kBAAAA,IAAI,mBAAYP,OAAO,CAACK,OAAR,CAAgB,CAAhB,EAAmBG,EAA/B;AAHc,iB,EAMpB;AACA;AACA;AACA;AACA;;AAEA,qBAAKV,QAAL,CAAc;AACZvB,kBAAAA,WAAW,EAAE0B,WADD;AAEZQ,kBAAAA,YAAY,EAAEnB,GAAG,CAACoB;AAFN,iBAAd,E,CAKA;;;;;;;;;;;;;;;;6BAGO;AACP,aACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF,EAIE;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,MAAD;AAAQ,QAAA,WAAW,EAAE,KAAKpC,KAAL,CAAWC,WAAhC;AAA6C,QAAA,QAAQ,EAAE,KAAKD,KAAL,CAAWE,YAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CAJF,CADF,CAFF,EAYE;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,SAAD;AAAW,QAAA,SAAS,EAAE,KAAKF,KAAL,CAAWmC,YAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF,CAZF,CADF;AAoBD;;;;EAnFe1C,S;;AAsFlB,eAAeK,GAAf","sourcesContent":["import React, { Component } from 'react'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.scss';\nimport '../assets/weather-icons/css/weather-icons.css';\n\nimport Background from './background/Background';\nimport Status from './status/Status';\nimport Date from './date/Date';\nimport Forecasts from './forecasts/Forecasts';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      weatherData: {},\n      locationData: {}\n    };\n    \n    // this.getLocation();\n  }\n\n  componentDidMount() {\n    this.getLocation();\n  }\n\n   getLocation() {\n    const geolocation = navigator.geolocation;\n    geolocation.getCurrentPosition(position => {\n      this.getWeatherInfo(position.coords.latitude, position.coords.longitude)\n    });\n  };\n\n  async getCountry(lat, lon) {\n    const data = await fetch(`http://www.mapquestapi.com/geocoding/v1/reverse?key=KEY&location=${lat},${lon}`).then(res => res.json());\n\n    const location = {\n      city: data.adminArea5,\n      country: data.adminArea1\n    }\n\n    this.setState({\n      locationData: location\n    });\n  }\n\n  async getWeatherInfo(lat, long) {\n    const oneData = await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${long}&units=metric&appid=c5baa00af2bfbc51b5a8bff68a069bb0&cnt=7`).then(res => res.json());\n\n    const res = await fetch(`https://api.openweathermap.org/data/2.5/forecast/daily?lat=${lat}&lon=${long}&units=metric&appid=c5baa00af2bfbc51b5a8bff68a069bb0&cnt=7`).then(res => res.json());\n\n    // console.log(res)\n\n    const weatherInfo = {\n      temp: oneData.main.temp,\n      desc: oneData.weather[0].description,\n      icon: `wi-owm-${oneData.weather[0].id}`\n    };\n\n    // const forecastData = {\n    //   temp: res.list[0].main.temp,\n    //   desc: res.weather[0].description,\n    //   icon: `wi-owm-${res.weather[0].id}`\n    // };\n\n    this.setState({\n      weatherData: weatherInfo,\n      forecastData: res.list\n    })\n\n    // console.log(this.state.forecastData)\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <Background />\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-8\">\n              <Date />\n            </div>\n            <div className=\"col-4\">\n              <Status weatherData={this.state.weatherData} location={this.state.locationData} />\n            </div>\n          </div>\n        </div>\n        <div className=\"forecastsWrapper\">\n          <div className=\"col-12\">\n            <Forecasts forecasts={this.state.forecastData} />\n          </div>\n        </div>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}